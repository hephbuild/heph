def _fail_if_present(kwargs, key):
    if key in kwargs:
        fail("argument `{}` is not allowed".format(key))

def target(sandbox=True, cache=True, *args, **kwargs):
    return _internal_target(
        sandbox=sandbox,
        cache=cache,
        *args, **kwargs,
    )

def group(*args, **kwargs):
    _fail_if_present(kwargs, "sandbox")
    _fail_if_present(kwargs, "cache")
    _fail_if_present(kwargs, "out")
    _fail_if_present(kwargs, "run")

    return target(
        run='group',
        out='/**/*',
        cache=heph.cache(named=False),
        *args, **kwargs
    )

def text_file(name, text, out=None, mode=777, *args, **kwargs):
    _fail_if_present(kwargs, "run")

    return target(
        name=name,
        out=out or name,
        run=['text_file', str(mode)],
        _file_content=text,
        cache=heph.cache(named=False),
        *args, **kwargs
    )

def json_file(data, *args, **kwargs):
    return text_file(
        text=to_json(data),
        *args, **kwargs
    )

def tool_target(run=[], *args, **kwargs):
    _fail_if_present(kwargs, "entrypoint")
    _fail_if_present(kwargs, "run_in_cwd")
    _fail_if_present(kwargs, "sandbox")
    _fail_if_present(kwargs, "cache")
    _fail_if_present(kwargs, "pass_args")
    _fail_if_present(kwargs, "concurrent_execution")

    return target(
        entrypoint='exec',
        run=['heph_tool']+([run] or []),
        run_in_cwd=True,
        sandbox=False,
        cache=False,
        pass_args=True,
        pass_env='*',
        concurrent_execution=True,
        src_env='abs',
        *args, **kwargs
    )

def switch_target(switch, cases={}, *args, **kwargs):
    _fail_if_present(kwargs, "name")
    _fail_if_present(kwargs, "out")

    return target(
        run=['switch_target'],
        deps=switch,
        _switch_cases=cases,
        cache=False,
        *args, **kwargs,
    )
